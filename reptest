(* A sort of implementation of the `replicate` function
   from the Factor language -- call a quotation N times
   and collect the results into a list. *)

define zero? [= 0 copy]
define not [= false]

define bi [
    (* Bi combinator: [a→b] [a→c] a → b c *)
    swap            (* [a→c] [a→b] a ... *)
    dip [           (* [a→b] a ... *)
        dip [copy]  (* [a→b] a a ... *)
        swap        (* a [a→b] a ... *)
        dip [apply] (* a b ... *)
        swap        (* b a ... *)
    ]               (* [a→c] b a ... *)
    swap            (* b [a→c] a ... *)
    dip [apply]     (* b c ... *)
]

define replicate [              (* N quot *)
    dip [dip [ { } ]]           (* N quot {} *)
    while [not zero?] [         (* N quot {...} *)
        dip [                   (* quot {...} *)
            bi [ ] [apply-0to1] (* quot result {...} *)
            dip [cons]          (* quot {result ...} *)
        ]                       (* N quot {result ...} *)
        - 1                     (* N-1 quot {result ...} *)
    ]
    pop pop                     (* {result ...} *)
]

println replicate 5 [ 7 ]
println replicate 3 [ { "Bagels" "Hamburgers" "Club Sandwiches" } ]
println typeof [replicate]

define make-copies [
    dip [ curry [ ] ]
    replicate
]

(* Make four lasagnas. *)

println make-copies 4 "lasagna"
